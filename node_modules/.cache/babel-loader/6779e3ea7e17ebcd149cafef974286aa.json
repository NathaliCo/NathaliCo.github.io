{"ast":null,"code":"var _jsxFileName = \"/home/nathalie/laboratoria/nathaliCo.github.io/src/Components/Contact.js\";\nimport React, { Component } from 'react';\nimport firebaseConf from './firebaseConf';\nimport \"./contact.css\";\nimport Title from './Title';\nimport ScrollAnimation from 'react-animate-on-scroll';\nexport default class Contact extends Component {\n  // inicializamos nuestro estado inicial\n  constructor(props) {\n    super(props);\n    this.state = {\n      form: [],\n      alert: false,\n      alertData: {}\n    };\n  } // Mostrar una alerta cuando se envia el formulario\n\n\n  showAlert(type, message) {\n    this.setState({\n      alert: true,\n      alertData: {\n        type,\n        message\n      }\n    });\n    setTimeout(() => {\n      this.setState({\n        alert: false\n      });\n    }, 4000);\n  } // Con esta funcion borramos todos los elementos del formulario\n\n\n  resetForm() {\n    this.refs.contactForm.reset();\n  } // Funcion para enviar la informacion del formulario a Firebase Database\n\n\n  sendMessage(e) {\n    // Detiene la acciÃ³n predeterminada del elemento\n    e.preventDefault(); // Creamos un objeto con los valores obtenidos de los inputs\n\n    const params = {\n      name: this.inputName.value,\n      email: this.inputEmail.value,\n      phone: this.inputPhone.value,\n      message: this.textAreaMessage.value\n    }; // Validamos que no se encuentren vacios los principales elementos de nuestro formulario\n\n    if (params.name && params.email && params.phone && params.phone && params.message) {\n      // enviamos nuestro objeto \"params\" a firebase database\n      firebaseConf.database().ref('form').push(params).then(() => {\n        // Si todo es correcto, actualizamos nuestro estado para mostrar una alerta.\n        this.showAlert('success', 'Your message was sent successfull');\n      }).catch(() => {\n        // Si ha ocurrido un error, actualizamos nuestro estado para mostrar el error \n        this.showAlert('danger', 'Your message could not be sent');\n      }); // limpiamos nuestro formulario llamando la funcion resetform\n\n      this.resetForm();\n    } else {\n      // En caso de no llenar los elementos necesario despliega un mensaje de alerta\n      this.showAlert('warning', 'Please fill the form');\n    }\n\n    ;\n  }\n\n  render() {\n    return React.createElement(React.Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68\n      },\n      __self: this\n    }, React.createElement(ScrollAnimation, {\n      animateIn: \"fadeIn\",\n      animateOut: \"fadeOut\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69\n      },\n      __self: this\n    }, React.createElement(\"section\", {\n      className: \"form\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70\n      },\n      __self: this\n    }, React.createElement(Title, {\n      name: \"Contact Me\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      class: \"row\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72\n      },\n      __self: this\n    }, React.createElement(\"form\", {\n      class: \"col s12\",\n      onSubmit: this.sendMessage.bind(this),\n      ref: \"contactForm\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      class: \"row\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      class: \"input-field col s12\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75\n      },\n      __self: this\n    }, React.createElement(\"i\", {\n      class: \"material-icons prefix\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76\n      },\n      __self: this\n    }, \"account_circle\"), React.createElement(\"input\", {\n      id: \"icon_prefix\",\n      type: \"text\",\n      class: \"validate\",\n      ref: name => this.inputName = name,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77\n      },\n      __self: this\n    }), React.createElement(\"label\", {\n      for: \"icon_prefix\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78\n      },\n      __self: this\n    }, \"Name\"))), React.createElement(\"div\", {\n      class: \"row\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      class: \"input-field col s12\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83\n      },\n      __self: this\n    }, React.createElement(\"i\", {\n      class: \"material-icons prefix\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84\n      },\n      __self: this\n    }, \"phone\"), React.createElement(\"input\", {\n      id: \"icon_telephone\",\n      type: \"tel\",\n      class: \"validate\",\n      ref: phone => this.inputPhone = phone,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85\n      },\n      __self: this\n    }), React.createElement(\"label\", {\n      for: \"icon_telephone\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86\n      },\n      __self: this\n    }, \"Telephone\"))), React.createElement(\"div\", {\n      class: \"row\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      class: \"input-field col s12\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90\n      },\n      __self: this\n    }, React.createElement(\"i\", {\n      class: \"material-icons prefix\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91\n      },\n      __self: this\n    }, \"email\"), React.createElement(\"input\", {\n      id: \"icon_email\",\n      type: \"tel\",\n      class: \"validate\",\n      ref: email => this.inputEmail = email,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92\n      },\n      __self: this\n    }), React.createElement(\"label\", {\n      for: \"icon_email\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93\n      },\n      __self: this\n    }, \"Email\"))), React.createElement(\"div\", {\n      class: \"row\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      class: \"input-field col s12\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97\n      },\n      __self: this\n    }, React.createElement(\"i\", {\n      class: \"material-icons prefix\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98\n      },\n      __self: this\n    }, \"message\"), React.createElement(\"textarea\", {\n      id: \"textarea1\",\n      type: \"tel\",\n      class: \"materialize-tarea\",\n      ref: message => this.textAreaMessage = message,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99\n      },\n      __self: this\n    }), React.createElement(\"label\", {\n      for: \"texttarea1\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100\n      },\n      __self: this\n    }, \"Message\"))), this.state.alert && React.createElement(\"div\", {\n      className: \"alert alert-\".concat(this.state.alertData.type),\n      role: \"alert\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"helper-text\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104\n      },\n      __self: this\n    }, this.state.alertData.message)), React.createElement(\"button\", {\n      type: \"submit\",\n      className: \"btn waves-effect waves-light\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108\n      },\n      __self: this\n    }, \"Send\"))))));\n  }\n\n}","map":{"version":3,"sources":["/home/nathalie/laboratoria/nathaliCo.github.io/src/Components/Contact.js"],"names":["React","Component","firebaseConf","Title","ScrollAnimation","Contact","constructor","props","state","form","alert","alertData","showAlert","type","message","setState","setTimeout","resetForm","refs","contactForm","reset","sendMessage","e","preventDefault","params","name","inputName","value","email","inputEmail","phone","inputPhone","textAreaMessage","database","ref","push","then","catch","render","bind"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport firebaseConf from './firebaseConf';\nimport \"./contact.css\"\nimport Title from './Title';\nimport ScrollAnimation from 'react-animate-on-scroll';\n\nexport default class Contact extends Component {\n\n  // inicializamos nuestro estado inicial\n  constructor(props) {\n    super(props);\n    this.state = {\n      form: [],\n      alert: false,\n      alertData: {}\n    };\n  }\n\n  // Mostrar una alerta cuando se envia el formulario\n  showAlert(type, message) {\n    this.setState({\n      alert: true,\n      alertData: { type, message }\n    });\n    setTimeout(() => {\n      this.setState({ alert: false });\n    }, 4000)\n  }\n\n  // Con esta funcion borramos todos los elementos del formulario\n  resetForm() {\n    this.refs.contactForm.reset();\n  }\n\n  // Funcion para enviar la informacion del formulario a Firebase Database\n  sendMessage(e) {\n    // Detiene la acciÃ³n predeterminada del elemento\n    e.preventDefault();\n    \n    // Creamos un objeto con los valores obtenidos de los inputs\n    const params = {\n      name: this.inputName.value,\n      email: this.inputEmail.value,\n      phone: this.inputPhone.value,\n      message: this.textAreaMessage.value\n    };\n    \n    // Validamos que no se encuentren vacios los principales elementos de nuestro formulario\n    if (params.name && params.email && params.phone && params.phone && params.message) {\n      // enviamos nuestro objeto \"params\" a firebase database\n      firebaseConf.database().ref('form').push(params).then(() => {\n        // Si todo es correcto, actualizamos nuestro estado para mostrar una alerta.\n        this.showAlert('success', 'Your message was sent successfull');\n      }).catch(() => {\n        // Si ha ocurrido un error, actualizamos nuestro estado para mostrar el error \n        this.showAlert('danger', 'Your message could not be sent');\n      });\n      // limpiamos nuestro formulario llamando la funcion resetform\n      this.resetForm();\n    } else {\n      // En caso de no llenar los elementos necesario despliega un mensaje de alerta\n      this.showAlert('warning', 'Please fill the form');\n    };\n  }\n\n  render() {\n    return (\n      <React.Fragment>\n       <ScrollAnimation animateIn='fadeIn' animateOut='fadeOut'>\n        <section className = \"form\">\n        <Title  name = \"Contact Me\"/>\n        <div class=\"row\">\n    <form class=\"col s12\" onSubmit={this.sendMessage.bind(this)} ref='contactForm'>\n      <div class=\"row\">\n        <div class=\"input-field col s12\">\n          <i class=\"material-icons prefix\">account_circle</i>\n          <input id=\"icon_prefix\" type=\"text\" class=\"validate\" ref={name => this.inputName = name}/>\n          <label for=\"icon_prefix\">Name</label>\n          \n        </div>\n        </div>\n        <div class=\"row\">\n        <div class=\"input-field col s12\">\n          <i class=\"material-icons prefix\">phone</i>\n          <input id=\"icon_telephone\" type=\"tel\" class=\"validate\" ref={phone => this.inputPhone = phone}/>\n          <label for=\"icon_telephone\">Telephone</label>\n        </div>\n      </div>\n      <div class=\"row\">\n      <div class=\"input-field col s12\">\n          <i class=\"material-icons prefix\">email</i>\n          <input id=\"icon_email\" type=\"tel\" class=\"validate\" ref={email => this.inputEmail = email}/>\n          <label for=\"icon_email\">Email</label>\n        </div>\n      </div>\n      <div class=\"row\">\n      <div class=\"input-field col s12\">\n          <i class=\"material-icons prefix\">message</i>\n          <textarea id=\"textarea1\" type=\"tel\" class=\"materialize-tarea\" ref={message => this.textAreaMessage = message}/>\n          <label for=\"texttarea1\">Message</label>\n        </div>\n        </div>\n        {this.state.alert && <div className={`alert alert-${this.state.alertData.type}`} role='alert'>\n<div className='helper-text'>\n{this.state.alertData.message}\n</div>\n</div>}\n<button type='submit' className='btn waves-effect waves-light'>Send</button>\n\n    </form>\n  </div>\n  </section>\n        </ScrollAnimation>\n     </React.Fragment>\n\n    );\n  }\n}"]},"metadata":{},"sourceType":"module"}